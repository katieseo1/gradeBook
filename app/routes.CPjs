require('es6-promise').polyfill();
require('isomorphic-fetch');

const User = require('../app/models/user');
const apiURL='http://localhost:8080/api/';

module.exports = function(app, passport) {

	//Display error message
	  function errMsg(res){
		//	console.log(res);
			if (res.status >= 400) {
				throw new Error("Bad response from server");
			}
	  }

	// Home page
	app.get('/', function(req, res) {
		res.render('index.ejs', {
			message: req.flash('loginMessage')
		});
	});

	//Get a list of students
	app.get('/studentList', isLoggedIn, function(req, res) {
		fetch(apiURL+'studentList')
		.then(function(res) {
			errMsg(res);
			return res.json();
		})
		.then(function(user) {
			res.render('studentList.ejs', {
				user: user
			});
		});
	});

	//Get a student's grades
	app.get('/getGrade/:id', isLoggedIn, (req, res) => {
		fetch(apiURL+'getGrade/'+req.params.id)
		.then(function(res) {
			errMsg(res);
			return res.json();
		})
		.then(function(user) {
			res.json(
				user
			);
		});
	});


	//Add student
	app.post('/addStudent', isLoggedIn, (req, res) => {
		fetch(apiURL + 'addStudent/', {
			method: 'POST',
			headers: {
				Accept: 'application/json',
				'Content-Type': 'application/json',
			},
			body: JSON.stringify(req.body)
		}).then(function(res) {
			errMsg(res);
			return res.json();
		})
	});


	// Update a student info
	app.put('/student/:id', isLoggedIn, (req, res) => {
		fetch(apiURL + 'student/'+req.params.id, {
			method: 'PUT',
			headers: {
				Accept: 'application/json',
				'Content-Type': 'application/json',
			},
			body: JSON.stringify(req.body)
		}).then(function(res) {
			errMsg(res);
			return res.json();
		}).then(function(user) {
			res.json(
				user
			);
		});
	});

	//Delete a student
	app.delete('/student/:id', isLoggedIn, (req, res) => {
		fetch(apiURL+'student/'+req.params.id,{
			method:'DELETE'
		})
		.then(function(res) {
			errMsg(res);
			return res.json();
		})
		.then(function(user) {
			res.json(
				user
			);
		});
	});


	// ??????????? Get a student info
	app.get('/student/:id', isLoggedIn, (req, res) => {
		User.findById(req.params.id).exec().then(user => res.json(user.apiRepr())).catch(err => {
			console.error(err);
			res.status(500).json({
				error: 'something went horribly awry-get id'
			});
		});
	});

//==================TEST STAT==========//
	//Get test statistic for a test
	app.get('/testList/:id', (req, res) => {
		User.find().where('local.usergroup').equals('student').exec().then(user => {
			let testId = req.params.id;
			let testScores = [];
			let studentScores = [];
			for (i = 0; i < user.length; i++) {
				obj = {};
				if (user[i].local.grades.length != 0) {
					cnt += 1;
					for (k = 0; k < user[i].local.grades.length; k++) {
						if (user[i].local.grades[k].testNumber == testId) {
							testScores.push(user[i].local.grades[k].testScore);
							obj['score'] = user[i].local.grades[k].testScore;
							obj['name'] = user[i].local.firstname + " " + user[i].local.lastname;
							obj['studentId'] = user[i].id;
							studentScores.push(obj);
						}
					}
				}
			}
			res.json({
				studentScores: studentScores,
				testScores: testScores
			});
		}).catch(err => {
			console.error(err);
			res.status(500).json({
				message: err
			});
		});
	});
	//Update test score
	app.put('/testList/:id', (req, res) => {
		const toUpdate = {};
		let origScore = [];
		let index = null;
		let testNum = parseInt(req.body.testNumber);
		let testScore = parseInt(req.body.testScore);
		console.log("+++++++++++++++++++++++++++");
		User.
		findById(req.params.id).
		exec().
		then(user => {
			origScore = user.local.grades;
			for (i = 0; i < origScore.length; i++) {
				if (origScore[i].testNumber == testNum) {
					index = i;
					origScore[i].testScore = testScore;
				}
			}
			console.log(origScore);
			toUpdate['local.grades'] = origScore;
			User.findByIdAndUpdate(req.params.id, {
				$set: toUpdate
			}).exec().then(user => {
				console.log(user);
				res.json({
					user: user
				})
			}).catch(err => res.status(500).json({
				message: 'Internal server error'
			}));
		}).catch(err => res.status(500).json({
			message: 'Internal server error'
		}));
	});
	//Delete a score of the teset
	app.delete('/testList/:id', (req, res) => {
		const toUpdate = {};
		let origScore = [];
		let testNum = parseInt(req.body.testNumber);
		let testScore = parseInt(req.body.testScore);
		console.log("+++++++++++++++++++++++++++");
		User.
		findById(req.params.id).
		exec().
		then(user => {
			origScore = user.local.grades;
			for (i = 0; i < origScore.length; i++) {
				if (origScore[i].testNumber == testNum) {
					origScore.splice(i, 1);
					//	origScore[i].testScore = testScore;
				}
			}
			console.log(origScore);
			toUpdate['local.grades'] = origScore;
			User.findByIdAndUpdate(req.params.id, {
				$set: toUpdate
			}).exec().then(user => {
				console.log(user);
				res.json({
					user: user
				});
			}).catch(err => res.status(500).json({
				message: 'Internal server error'
			}));
		}).catch(err => res.status(500).json({
			message: 'Internal server error'
		}));
	});

	//List of tests with avg score
	app.get('/testStat', (req, res) => {
		let maxTstNumber = 0;
		let sum = {};
		User.find().where('local.usergroup').equals('student').exec().then(user => {
			for (i = 0; i < user.length; i++) {
				if (maxTstNumber < user[i].local.grades.length) {
					maxTstNumber = user[i].local.grades.length;
				}
			}
			let stat = [];
			let examObj;
			for (j = 1; j <= maxTstNumber; j++) {
				examObj = {};
				sum = 0;
				cnt = 0;
				for (i = 0; i < user.length; i++) {
					if (user[i].local.grades.length != 0) {
						cnt += 1;
						for (k = 0; k < user[i].local.grades.length; k++) {
							if (user[i].local.grades[k].testNumber == j) {
								sum += user[i].local.grades[k].testScore;
							}
						}
					}
				}
				examObj['testId'] = j;
				examObj['avg'] = sum / cnt;
				stat.push(examObj);
			}
			res.render('testStat.ejs', {
				user: user,
				stat: stat
			});
		}).catch(err => {
			console.error(err);
			res.status(500).json({
				message: err
			});
		});
	});


	//Prepare the page for adding test scores
	app.get('/addTest', isLoggedIn, (req, res) => {

		fetch(apiURL+'addTest')
		.then(function(res) {
			errMsg(res);
			return res.json();
		})
		.then(function(data) {
			res.render('addTestScores.ejs', {
				user: data.user,
				nextTestNumber: data.nextTestNumber + 1
			});

		});
	});



	// Add new scores for a test
	app.post('/addTestScore', isLoggedIn, (req, res) => {
		console.log(req.body);
		fetch(apiURL + 'addTestScore/', {
			method: 'POST',
			headers: {
				Accept: 'application/json',
				'Content-Type': 'application/json',
			},
			body: JSON.stringify(req.body)
		})
		.then(function(res) {
			errMsg(res);
			return res.json();
		})
		.then(function(user) {
			res.json(
				user
			);
		});
	});

	// logout
	app.get('/logout', (req, res) => {
		req.logout();
		res.redirect('/');
	});
	//Login
	app.post('/login', passport.authenticate('local-login', {
		successRedirect: '/studentList', // redirect to the secure profile section
		failureRedirect: '/', // redirect back to the signup page if there is an error
		failureFlash: true // allow flash messages
	}));
	//signup page
	app.get('/signup', (req, res) => {
		res.render('signup.ejs', {
			message: req.flash('signupMessage')
		});
	});
	// process the signup form
	app.post('/signup', passport.authenticate('local-signup', {
		successRedirect: '/studentList', // redirect to the secure profile section
		failureRedirect: '/signup', // redirect back to the signup page if there is an error
		failureFlash: true // allow flash messages
	}));
};
// route middleware to ensure user is logged in
function isLoggedIn(req, res, next) {
	if (req.isAuthenticated()) return next();
	res.redirect('/');
}
